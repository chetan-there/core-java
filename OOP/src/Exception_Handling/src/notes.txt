1. Introduction to Exception Handling
•	Exception: Abnormal or unexpected situation during the normal execution of a program.
•	Occurs: Always at runtime.
•	Effect: Interrupts program execution and may terminate it.
Causes of Exceptions
1.	Wrong input by the user
2.	Dependency between program parts
2. Common Exceptions in Java
1. ArithmeticException
int x = 100;
int y = 0;
int z = x / y; // java.lang.ArithmeticException
2. ArrayIndexOutOfBoundsException
int[] arr = {10, 20, 30};
System.out.println(arr[3]);
3. NegativeArraySizeException
int[] arr = new int[-10];
4. NumberFormatException
String str = "h";
int x = Integer.parseInt(str);
5. NullPointerException
String str = null;
System.out.println(str.length());
6. InputMismatchException
Scanner sc = new Scanner(System.in);
double salary = sc.nextDouble(); // if input is not a double, throws exception
7. StringIndexOutOfBoundsException
String str = "hyderabad";
System.out.println(str.substring(-2,5));
3. Exception Hierarchy
•	Exception and Error are subclasses of Throwable
•	Developers handle exceptions, system admins handle errors
4. Exception Format
FullyQualifiedName: errorMessage
Example:
java.lang.ArithmeticException: / by zero
4. Exception Format
FullyQualifiedName: errorMessage
Example:
java.lang.ArithmeticException: / by zero
5. try-catch-finally Structure
Keywords
1.	try
2.	catch
3.	finally
4.	throw
5.	throws
Rules
•	try must be followed by either catch or finally or both
•	No statement is allowed between try and catch
try block
•	Traces code line by line
•	On exception, creates Exception object and passes it to nearest catch block
catch block
•	Handles exception
•	Executes only if exception occurs in try block
finally block
•	Always executes (except in case of System.exit(0))
Used to close resources
6. Throw and Throws
throw
•	Used to throw exception explicitly
throw new ArithmeticException("Divide by zero");
throws
•	Declares that method might throw exception
public void show() throws IOException
7. try with Resources
•	Introduced in Java 7
•	Automatically closes resources
try (Scanner sc = new Scanner(System.in)) {
    // use scanner
}
Conditions
•	Resource must implement AutoCloseable or Closeable
