ðŸ“˜ Rules for Type Parameters in Java Generics

âœ… 1. Declaration Rule
â€¢	Type parameters are declared inside angle brackets < >.
class Box<T> { } // T is the type parameter
________________________________________
âœ… 2. Naming Conventions (Not Strict but Standard)
Symbol	Meaning
T	Type
E	Element (in collections)
K	Key
V	Value
N	Number
________________________________________
âœ… 3. Type Parameter Can Be Used as Any Type
â€¢	You can use it as method parameters, return types, or inside the class.
T data;
T getValue() { return data; }
________________________________________
âœ… 4. You Can Declare Multiple Type Parameters
class Pair<K, V> {
    K key;
    V value;
}
________________________________________
âœ… 5. You Can Set Bounds (Restricted Types)
class Calc<T extends Number> { } // T must be a subclass of Number
________________________________________
âœ… 6. Wildcards for Flexibility
â€¢	Use ? as a wildcard to allow any type:
List<?> list = new ArrayList<Integer>();
________________________________________
âœ… 7. Type Erasure Happens at Compile-Time
â€¢	Type parameters are removed during compilation.
â€¢	No generics info is available at runtime (due to Type Erasure).
________________________________________
Would you like examples for each rule? I can turn this into a mini notebook for revision if youâ€™d like!

