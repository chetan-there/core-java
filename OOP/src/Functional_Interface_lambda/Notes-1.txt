Hereâ€™s your updated and fully structured note on predefined functional interfaces in Java, now including the method name used in each interface (like test(), apply(), etc.). This will make your learning clearer and more complete.
________________________________________
ðŸŒŸ Working with Predefined Functional Interfaces in Java
Java provides several ready-to-use functional interfaces in the java.util.function package to support concise and expressive functional programming using lambda expressions.
________________________________________
1) Predicate
â€¢	Use: To test a condition (returns true or false)
â€¢	Method Used: test(T t)
â€¢	Return Type: boolean
// Traditional way
Predicate<String> isLong = new Predicate<String>() {
    public boolean test(String str) {
        return str.length() > 5;
    }
};

// Lambda way
Predicate<String> isLong = str -> str.length() > 5;
________________________________________
2) Consumer
â€¢	Use: Performs an action on the given input
â€¢	Method Used: accept(T t)
â€¢	Return Type: void
// Traditional way
Consumer<String> print = new Consumer<String>() {
    public void accept(String str) {
        System.out.println(str);
    }
};

// Lambda way
Consumer<String> print = str -> System.out.println(str);
________________________________________
3) Function<T, R>
â€¢	Use: Takes an input of type T and returns a result of type R
â€¢	Method Used: apply(T t)
â€¢	Return Type: R
// Traditional way
Function<String, Integer> getLength = new Function<String, Integer>() {
    public Integer apply(String str) {
        return str.length();
    }
};

// Lambda way
Function<String, Integer> getLength = str -> str.length();
________________________________________
4) Supplier
â€¢	Use: Supplies a result without any input
â€¢	Method Used: get()
â€¢	Return Type: T
// Traditional way
Supplier<String> supply = new Supplier<String>() {
    public String get() {
        return "Hello";
    }
};

// Lambda way
Supplier<String> supply = () -> "Hello";
________________________________________
5) BiPredicate<T, U>
â€¢	Use: Tests a condition on two inputs
â€¢	Method Used: test(T t, U u)
â€¢	Return Type: boolean
// Traditional way
BiPredicate<Integer, Integer> isSumEven = new BiPredicate<Integer, Integer>() {
    public boolean test(Integer a, Integer b) {
        return (a + b) % 2 == 0;
    }
};

// Lambda way
BiPredicate<Integer, Integer> isSumEven = (a, b) -> (a + b) % 2 == 0;
________________________________________
6) BiConsumer<T, U>
â€¢	Use: Takes two inputs and performs some operation
â€¢	Method Used: accept(T t, U u)
â€¢	Return Type: void
// Traditional way
BiConsumer<String, Integer> printData = new BiConsumer<String, Integer>() {
    public void accept(String name, Integer age) {
        System.out.println(name + " is " + age + " years old.");
    }
};

// Lambda way
BiConsumer<String, Integer> printData = (name, age) -> System.out.println(name + " is " + age + " years old.");
________________________________________
7) BiFunction<T, U, R>
â€¢	Use: Takes two inputs and returns a result
â€¢	Method Used: apply(T t, U u)
â€¢	Return Type: R
// Traditional way
BiFunction<Integer, Integer, Integer> add = new BiFunction<Integer, Integer, Integer>() {
    public Integer apply(Integer a, Integer b) {
        return a + b;
    }
};

// Lambda way
BiFunction<Integer, Integer, Integer> add = (a, b) -> a + b;
________________________________________
8) UnaryOperator
â€¢	Use: A Function where input and output are of same type
â€¢	Method Used: apply(T t)
â€¢	Return Type: T
// Traditional way
UnaryOperator<String> toUpper = new UnaryOperator<String>() {
    public String apply(String str) {
        return str.toUpperCase();
    }
};

// Lambda way
UnaryOperator<String> toUpper = str -> str.toUpperCase();
________________________________________
9) BinaryOperator
â€¢	Use: A BiFunction where input and output are of same type
â€¢	Method Used: apply(T t1, T t2)
â€¢	Return Type: T
// Traditional way
BinaryOperator<Integer> multiply = new BinaryOperator<Integer>() {
    public Integer apply(Integer a, Integer b) {
        return a * b;
    }
};

// Lambda way
BinaryOperator<Integer> multiply = (a, b) -> a * b;
________________________________________
10) ToIntFunction
â€¢	Use: Takes input of type T and returns int
â€¢	Method Used: applyAsInt(T t)
â€¢	Return Type: int
// Traditional way
ToIntFunction<String> length = new ToIntFunction<String>() {
    public int applyAsInt(String str) {
        return str.length();
    }
};

// Lambda way
ToIntFunction<String> length = str -> str.length();
________________________________________
11) ToLongFunction
â€¢	Use: Takes input of type T and returns long
â€¢	Method Used: applyAsLong(T t)
â€¢	Return Type: long
// Traditional way
ToLongFunction<String> lengthLong = new ToLongFunction<String>() {
    public long applyAsLong(String str) {
        return str.length();
    }
};

// Lambda way
ToLongFunction<String> lengthLong = str -> str.length();
________________________________________
12) ToDoubleFunction
â€¢	Use: Takes input of type T and returns double
â€¢	Method Used: applyAsDouble(T t)
â€¢	Return Type: double
// Traditional way
ToDoubleFunction<String> toDouble = new ToDoubleFunction<String>() {
    public double applyAsDouble(String str) {
        return Double.parseDouble(str);
    }
};

// Lambda way
ToDoubleFunction<String> toDouble = str -> Double.parseDouble(str);
________________________________________


