Multithreading :
----------------
Uniprocessing :-
----------------
In uniprocessing, only one process can occupy the memory So the
major drawbacks are 
1) Memory is westage
2) Resources are westage
3) Cpu is idle
To avoid the above said problem, multitasking is introduced.
In multitasking multiple tasks can concurrently work with CPU so, our task will be completed as 
soon as possible.
Multitasking is further divided into two categories.
a) Process based Multitasking [Diagram : 21st JAN]
b) Thread based Multitasking [Diagram : 21st JAN]
Process based Multitasking :
----------------------------
If a CPU is switching from one subtask(Thread) of one process to another subtask of another 
process then it is called Process based Multitasking.
Thread based Multitasking :
---------------------------
If a CPU is switching from one subtask(Thread) to another subtask within the same process then it 
is called Thread based Multitasking.
What is Thread in java ?
-------------------------
A thread is light weight process and it is the basic unit of CPU which can run concurrently with 
another thread within the same context (process).
It is well known for independent execution. The main purpose of multithreading to boost the 
execution sequence.
A thread can run with another thread concurrently within the same process so our task will be 
completed as soon as possible.
In java whenever we define main method then JVM internally creates a thread called main thread 
under main group.
Program that describes that main is a Thread :
-----------------------------------------------
Whenever we define main method then JVM will create main thread internally under main group, 
the purpose of this main thread to execute the entire main method code.
In java there is a predefined class called Thread available in java.lang package, this class contains 
a predefined static factory method currentThread() which will provide currently executing Thread 
Object.
Thread t = Thread.currentThread(); //static Factory Method
Thread class has provided predefined method getName() to get the name of the Thread.
 public final String getName();
Program :
----------
package com.ravi.mt;
public class MainThread 
{
public static void main(String[] args)
{
Thread t1 = Thread.currentThread();
System.out.println("Current Thread Name is :"+t1.getName());
 //OR
String name = Thread.currentThread().getName(); //Method chaining
System.out.println("Running thread name is :"+name);
}
}
------------------------------------------------------------
How to create user-defined thread ?
-----------------------------------
We can create user-defined thread by using the following two packages 
 1) By using java.lang package [JDK 1.0]
 2) By using java.util.concurrent sub package [JDK 1.5]
Creating user-defind Thread by using java.lang package :
--------------------------------------------------------
By using java.lang package we can create user-defined thread by using any one of the following 
two approaches :
1) By extending java.lang.Thread class
2) By implementing java.lang.Runnable interface 
Note :- Thread is a predefined class available in java.lang package where as Runnable is a 
predefined interface available in java.lang Package.
-------------------------------------------------------------
Creating user-defined Thread by using extending Thread class :
--------------------------------------------------------------
public synchronized void start() :
-----------------------------------
start() is a predefined non static method of Thread class which internally performs the following two 
tasks :
1) It will make a request to the O.S to assign a new thread for concurrent execution.
2) It will implicitly call run() method on the current object.
package com.ravi.multithreading;
class MyThread extends Thread
{
@Override
public void run()
{
System.out.println("Child thread is Running..");
}
}
public class CustomThread 
{
public static void main(String[] args) throws InterruptedException 
{
System.out.println("Main thread started.....");
MyThread mt = new MyThread();
mt.start();
System.out.println("Main thread ended.....");
}
}
In the above program, we have two threads, main thread which is responsible to execute 
main method and Thread-0 thread which is responsible to execute run() method. [22-JAN]
In entire Multithreading concept start() is the only method which is responsible to create a new 
thread.
---------------------------------------------------------------
public final boolean isAlive() :-
-----------------------------
It is a predefined non static method of Thread class through which we can find out whether a thread 
has started or not ?
As we know a new thread is created/started after calling start() method so if we use isAlive() 
method before start() method, it will return false but if the same isAlive() method if we invoke after 
the start() method, it will return true.
We can't restart a thread in java if we try to restart then It will generate an exception i.e 
java.lang.IllegalThreadStateException
---------------------------------------------------------------
package com.ravi.basic;
class Foo extends Thread
{
@Override
public void run()
{
System.out.println("Child thread is running...");
System.out.println("It is running with separate stack memory");
}
}
public class IsAlive 
{
public static void main(String[] args) 
{
System.out.println("Main Thread started...");
Foo f1 = new Foo();
System.out.println("Is Thread alive : "+f1.isAlive());
f1.start(); 
System.out.println("Thread is alive or not : "+f1.isAlive());
//f1.start(); //java.lang.IllegralThreadStateException
System.out.println("Main Thread ended...");
}
}
----------------------------------------------------------------
package com.ravi.basic;
class Stuff extends Thread
{
@Override
public void run() 
{
String name = Thread.currentThread().getName();
System.out.println("Child Thread is Running, name is :"+name);
}
}
public class ExceptionDemo 
{
public static void main(String[] args)
{
String name = Thread.currentThread().getName();
 System.out.println(name+" thread started");
Stuff s1 = new Stuff(); 
Stuff s2 = new Stuff(); 
s1.start();
s2.start();
System.out.println(10/0);
System.out.println("Main Thread Ended");
}
}
Note :- Here main thread is interrupted due to AE but still child thread will be executed because 
child threads are executing with separate Stack.
----------------------------------------------------------------
package com.ravi.basic;
class Sample extends Thread 
{
@Override
public void run()
{
String name = Thread.currentThread().getName();
for(int i=1; i<=10; i++)
{
 System.out.println("i value is :"+i+" by "+name+ " thread");
}
}
}
public class ThreadLoop 
{
public static void main(String[] args)
{
Sample s1 = new Sample();
s1.start();
 String name = Thread.currentThread().getName();
for(int i=1; i<=10; i++)
{
 System.out.println("i value is :"+i+" by "+name+ " thread");
}
int x = 1;
do
{
System.out.println("Batch 40");
 x++;
}
while(x<=10);
}
}
Note : Here processor is frequently switching from main thread to Thread-0 thread so output is unpredicatable.